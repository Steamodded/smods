[manifest]
version = "1.0.0"
dump_lua = true
priority = -10

### Perma-bonusses
## for jokers: Chips, Mult, xMult, end of round Dollars
## for playing cards: Chips, Mult, xMult, Dollars, on held Chips, on held Mult, on held xMult, and end of round Dollars

## setting values

# Card:set_ability
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''perma_bonus = self.ability and self.ability.perma_bonus or 0,'''
position = "after"
match_indent = true
payload = '''
perma_mult = self.ability and self.ability.perma_mult or 0,
perma_x_mult = self.ability and self.ability.perma_x_mult or 0,
perma_p_dollars = self.ability and self.ability.perma_p_dollars or 0,
perma_h_chips = self.ability and self.ability.perma_h_chips or 0,
perma_h_mult = self.ability and self.ability.perma_h_mult or 0,
perma_h_x_mult = self.ability and self.ability.perma_h_x_mult or 0,
perma_h_dollars = self.ability and self.ability.perma_h_dollars or 0,  -- h_dollars is end of round
'''
times = 1

# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) > 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,
'''
position = "at"
match_indent = true
payload = '''
bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) ~= 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,
bonus_mult = (self.ability.perma_mult and self.ability.perma_mult ~= 0) and self.ability.perma_mult or nil,
bonus_x_mult = (self.ability.perma_x_mult and self.ability.perma_x_mult ~= 0) and self.ability.perma_x_mult or nil,
bonus_p_dollars = (self.ability.perma_p_dollars and self.ability.perma_p_dollars ~= 0) and self.ability.perma_p_dollars or nil,
bonus_h_chips = (self.ability.perma_h_chips and self.ability.perma_h_chips ~= 0) and self.ability.perma_h_chips or nil,
bonus_h_mult = (self.ability.perma_h_mult and self.ability.perma_h_mult ~= 0) and self.ability.perma_h_mult or nil,
bonus_h_x_mult = (self.ability.perma_h_x_mult and self.ability.perma_h_x_mult ~= 0) and self.ability.perma_h_x_mult or nil,
bonus_h_dollars = (self.ability.perma_h_dollars and self.ability.perma_h_dollars ~= 0) and self.ability.perma_h_dollars or nil,
'''
times = 1

## UI

# for default/unenhanced cards
# generate_card_ui
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if specific_vars.bonus_chips then
    localize{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = {specific_vars.bonus_chips}}
end
'''
position = "after"
match_indent = true
payload = '''
if specific_vars.bonus_mult then
    localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
if specific_vars.bonus_x_mult then
    localize{type = 'other', key = 'card_extra_x_mult', nodes = desc_nodes, vars = {specific_vars.bonus_x_mult}}
end
if specific_vars.bonus_p_dollars then
    localize{type = 'other', key = 'card_extra_p_dollars', nodes = desc_nodes, vars = {specific_vars.bonus_p_dollars}}
end
if specific_vars.bonus_h_chips then
    localize{type = 'other', key = 'card_extra_h_chips', nodes = desc_nodes, vars = {specific_vars.bonus_h_chips}}
end
if specific_vars.bonus_h_mult then
    localize{type = 'other', key = 'card_extra_h_mult', nodes = desc_nodes, vars = {specific_vars.bonus_h_mult}}
end
if specific_vars.bonus_h_x_mult then
    localize{type = 'other', key = 'card_extra_h_x_mult', nodes = desc_nodes, vars = {specific_vars.bonus_h_x_mult}}
end
if specific_vars.bonus_h_dollars then
    localize{type = 'other', key = 'card_extra_h_dollars', nodes = desc_nodes, vars = {specific_vars.bonus_h_dollars}}
end
'''
times = 1

# for enhanced cards
# generate_card_ui
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if _c.name ~= 'Stone Card' and ((specific_vars and specific_vars.bonus_chips) or (cfg.bonus ~= 0 and cfg.bonus)) then
    localize{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = {((specific_vars and specific_vars.bonus_chips) or cfg.bonus)}}
end
'''
position = "after"
match_indent = true
payload = '''
if specific_vars then
    if specific_vars.bonus_mult then
        localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
    end
    if specific_vars.bonus_x_mult then
        localize{type = 'other', key = 'card_extra_x_mult', nodes = desc_nodes, vars = {specific_vars.bonus_x_mult}}
    end
    if specific_vars.bonus_p_dollars then
        localize{type = 'other', key = 'card_extra_p_dollars', nodes = desc_nodes, vars = {specific_vars.bonus_p_dollars}}
    end
    if specific_vars.bonus_h_chips then
        localize{type = 'other', key = 'card_extra_h_chips', nodes = desc_nodes, vars = {specific_vars.bonus_h_chips}}
    end
    if specific_vars.bonus_h_mult then
        localize{type = 'other', key = 'card_extra_h_mult', nodes = desc_nodes, vars = {specific_vars.bonus_h_mult}}
    end
    if specific_vars.bonus_h_x_mult then
        localize{type = 'other', key = 'card_extra_h_x_mult', nodes = desc_nodes, vars = {specific_vars.bonus_h_x_mult}}
    end
    if specific_vars.bonus_h_dollars then
        localize{type = 'other', key = 'card_extra_h_dollars', nodes = desc_nodes, vars = {specific_vars.bonus_h_dollars}}
    end
end
'''
times = 1

## actual scoring

# Card:get_chip_mult()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
    return self.ability.mult
else
    return 0
'''
position = "at"
match_indent = true
payload = '''
    return self.ability.mult + (self.ability.perma_mult or 0)
else
    return self.ability.perma_mult or 0
'''
times = 1

# Card:get_chip_mult()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''return self.ability.mult'''
position = "at"
match_indent = true
payload = '''return self.ability.mult + (self.ability.perma_mult or 0)'''
times = 1

# Card:get_chip_x_mult()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.x_mult <= 1 then return 0 end
return self.ability.x_mult
'''
position = "at"
match_indent = true
payload = '''
if self.ability.x_mult + (self.ability.perma_x_mult or 0) ~= 1 then return 0 end
return self.ability.x_mult + (self.ability.perma_x_mult or 0)
'''
times = 1

# Card:get_chip_h_mult()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''return self.ability.h_mult'''
position = "at"
match_indent = true
payload = '''return self.ability.h_mult + (self.ability.perma_h_mult or 0)'''
times = 1

# Card:get_chip_h_x_mult()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''return self.ability.h_x_mult'''
position = "at"
match_indent = true
payload = '''return self.ability.h_x_mult + (self.ability.perma_h_x_mult or 0)'''
times = 1

# Card:get_p_dollars()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.p_dollars > 0 then'''
position = "before"
match_indent = true
payload = '''
ret = ret + self.ability.perma_p_dollars
'''
times = 1

# Card:get_end_of_round_effect
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.h_dollars > 0 then
    ret.h_dollars = self.ability.h_dollars
    ret.card = self
end
'''
position = "before"
match_indent = true
payload = '''
if (self.ability.h_dollars + self.ability.perma_h_dollars) ~= 0 then
    ret.h_dollars = (ret.h_dollars or 0) + self.ability.h_dollars + self.ability.perma_h_dollars
    ret.card = self
end
'''
times = 1
